[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[project]
name = "nocturne-backend"
version = "1.0.0"
description = "Nocturne - AI Sleep Support App Backend"
readme = "../README.md"
requires-python = ">=3.11"
authors = [
    { name = "Nocturne Development Team" },
]
keywords = ["sleep", "audio", "ai", "fastapi", "wellness"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
    "Typing :: Typed",
]

dependencies = [
    "fastapi==0.111.0",
    "uvicorn[standard]==0.30.1",
    "sqlalchemy==2.0.43",
    "alembic==1.13.1", 
    "pydantic==2.7.3",
    "pydantic-settings==2.3.3",
    "python-dotenv==1.0.1",
    "httpx==0.27.0",
    "python-multipart==0.0.18",
]

[project.optional-dependencies]
dev = [
    "pytest==8.2.2",
    "pytest-asyncio==0.23.7",
    "ruff==0.4.8",
    "mypy==1.10.0",
]

ai = [
    "openai>=1.35.3",
]

cache = [
    "redis>=5.0.4",
    "celery>=5.4.0",
]

[project.urls]
Homepage = "https://github.com/nyasuto/nocturne"
Documentation = "https://github.com/nyasuto/nocturne/blob/main/POC_GUIDE.md"
Repository = "https://github.com/nyasuto/nocturne.git"
Issues = "https://github.com/nyasuto/nocturne/issues"

[project.scripts]
nocturne-server = "app.main:app"

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
indent-width = 4

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
]
ignore = [
    "E501",   # line too long, handled by formatter
    "B008",   # do not perform function calls in argument defaults
    "B904",   # raise ... from ... within except clause
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["app"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "alembic.*",
    "sqlalchemy.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*", 
    "*/.venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]